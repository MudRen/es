                Commonly Used Properties in Standard Objects
               ----------------------------------------------
"name"
-------
 The name property is not absolutly need for every object. However, it
is defined here because many objects will ask for this property. You have
better keep it as a route to call set_name, set_short and set_long in all
objects you create. The name property is rather a "subject" description of
the object, like "guard" or "sword".


"c_name"
--------
 The c_name property is the Chinese version of name property.


"cap_name"
----------
 The cap_name is the capital name property. The property is set to save 
time in some case. Usually, when you call set_name, the property is set
automatically.


"c_cap_name"
------------
 The c_cap_name is the Chinese version of cap_name property.


"plural"
--------
 If the name of the object has a strange plural form, like "mouse" -> "mice"
 etc. You can use set( "plural", "mice" ) to define it.


"short"
--------
 The short property is a string which is the short description of the
object. When you look at the room, or someone's inventory, the short
description is displayed. You may want to call set_short() in most case
for future compatability.


"c_short"
---------
 The c_short property is a string which is the short description of 
the object in Chinese. 


"long"
-------
 the long property is a string which is the long description of the
object. When you look at a certain object, the long decscription of that
object is displayed. You may want to call set_long() for the reason of
future compatibility.


"c_long"
--------
 the c_long property is a string which is the long description of the
object in Chinese.


"id"
----
 The id property is an array of strings which are the names to which the
object will respond via the present() efun. set ("id", ({ "biff", "bam",
"kappow }) ). In most case, the set_name() function also sets id property
as an array with only-one element equal to the name. You may add extra
ids with add() function.


"light"
-------
 The light property is an integer which is 1 if the object is a light
source and 0 if it is not. set ("light", 1) replaces set_light(1) in most
applications.


"weight"
--------
 The weight property indicates the weight of the object. Currently it is 
measured 1 as 0.1 kg in real life. Remember to set this property in any
object like weapon, armor, ... etc. Livings has their default weight of
600 ( 60kg ), you can also change it as you like.


"max_load"
----------
 The maximum weight a container ( or a living ) can carry. This value is set
to query_max_load() defined in /std/living/stats.c. If in a container, you
should set this property. The /std/object/ob_logic maintains anouther
property "load" to register how much weight the object has carried.


"extra_look"
------------
 Extra_look is a string which stores a description that is added
to the carrying user's description. This is useful for things like curses
where one would want anyone seeing the user to know they are cursed.


"invisible"
-----------
 invisible is an integer which determines whether the object can be
seen by players, wizards, or neither. If an object has invis level 0, then
anyone can see it. If it has invis level 1, then players cannot see it. If
it has invis level 2, then only admins can see it.
In addition, messages sent by invisible objects will not be received by objects
that can't see them. This can make for a highly dangerous situation, since an
invisible monster could attack a player and the player would not know
that he was being attacked. Be careful. We hope to improve this in the
future.
 

"prevent_drop"
---------------
 This property allows an object to prevent itself from being
dropped by its holder.  This can be used for things like curses or guild
object which must never leave the user.
 

"prevent_get"
-------------
  This property prevents any user from getting this object from
its present position.  This can be used by such things as bulletin boards
or signs that you don't want players walking away with.
 

"prevent_insert"
-----------------
 This property prevents the object from being placed inside
another object, such as a bag.
 

"silent_look"
-------------
 Silent_look is an integer which is used by the look command
to determine whether the surrounding room (and that object) will be notified
that the player is look at it. Thus, if silent_look = 1, then it will not
display the "look" messages to the surroundings.

