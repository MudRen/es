                Commonly Used Properties in the Living Object
               ----------------------------------------------
"hit_points"
------------
 Hit_points is an integer which is the current number of hits the
monster has. 0=alive, -1=dead. You should not set this property to make
the monster damaged, instead, call the function receive_damage(). 


"max_hp"
---------
 Max_hp is an integer which is the maximum number of hits the beastie
can ever have. Currently this property is redirected to query_max_hp(), which
returns the max_hp determined by the monster's constitution. You can set it
directly if you want the monster have a higher ( or lower ) max_hp. The
formula is max_hp = constitution * 10 + 20.


"spell_points"
--------------
 spell_points is an integer which is the current magic power the monster
has. Because the spell system is still under developing, setting this
property will have no effect by now.


"max_sp"
---------
 max_sp is an integer which is the maximum number of spell_points the
monster can ever have. Currently this property is redirected to 
query_max_hp(), which returns the max_hp determined by the monster's 
constitution. You can set it directly if you want the monster have a 
higher ( or lower ) max_hp. The formula is max_hp = constitution * 10 + 20.


"npc"
-----
 The npc property designates whether the living object is a monster or
is actually a user. This attribute is LOCKED and is unchangable.
 

"weapon1" & "weapon2"
---------------------
 weapon1 and weapon2 are objects which points to the weapon the monster is
currently wielding. Don't set this directly: instead, call the lfun
wield_weapon() in the monster, which will take care of all wielding effects.


"natural_armor_class"
---------------------
 natural_armor_class is the monster's natural defensive ability. This value
is added to armor_class in calc_armor_class(). For more information about
the definition of armor class, see docs about combat.


"natural_defense_bonus"
-----------------------
 natural_defense_bonus is the monster's natural defensive bonus. this value
is added to defense_bonus in clac_armor_class(). For more information about
the definition of defense bonus, see docs about combat.


"natural_weapon_class1"
-----------------------
 natural_weapon_class1 is the natural weapon class of the monster. This
value is added to weapon_class in calc_weapon_class. If the monster can
attack twice in a round, you can also have the natural_weapon_class2
property. For more information about the definition of weapon class, see
docs about combat.


"natural_min_damage1" & "natural_max_damage1"
---------------------------------------------
 THe two properties indicates the natural damage this monster can make in
combat. There is also natural_min_damage2 and natural_max_damage2 property
if the monster can attack twice in a round. The two (or four) properties
are added to min_damage1 and min_damage2 in calc_weapon_class().


"armor"
-------
 armor is a mapping of objects where the keys are the types of armor
and the values are the various pieces of armor. You should not set this 
property directly. Instead, call the lfun equip_armor in the monster 
which does all the bookkeeping for you.


"no_attack"
-----------
 no_attack is an integer which, if set to 1, prevents players from attacking 
the living object. Useful for quest item receivers, shopkeepers and other 
living objects that should not vanish.


"gender"
---------
 Gender is a string that is determines the sex of the living object.
set("gender", "sex") replaces set_gender("sex") in most applications.


"race"
------
 Race is a string that indicates which race the monster belongs to. The
race setting might affect the monster's language.


"stop_attack"
-------------
 stop_attack is an integer which is used to prevent monsters from
making attacks in combat. When a monster (or player) casts a spell or takes
some other action that should require the use of his hands and attention, we
increase stop_attack by the amount of time it takes to complete that action,
thus preventing the monster from engaging in combat for that long. It is
decreased, if positive, in the monster's heartbeat: when it reaches 0 the
monster can attack normally again. You should not set this property's value
directly because if a monster is already stopped, you want to add to the
existing stop time rather than overwrite. Call the block_attack lfun in the
monster object instead, it handles this properly.
 

"time_to_heal"
--------------
 time_to_heal is an integer which is the number of heartbeats that
must pass before the player regenerates another hit point. The default
is 10.

"wealth"
---------
 wealth is a mapping whose keys are the names of coins and whose
values are integers which are the number of coins of that type the player
possesses. There is no restriction on what they keys may be; the player
will carry in his wealth property ANY type of coin that he picks up. You
should not set this property directly, as adding coins to the player also
changes his encumbrance. Instead, you should make a pile-of-coins object
and move it onto the player. See /doc/mudlib/money for more details on
how to handle player wealth.


