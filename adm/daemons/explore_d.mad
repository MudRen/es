// explore_d.c
// modified by Annihilator@Eastern.Stories (09/26/94)
// Added explore database maintainance and log.
// Rewritten by Kyoko@Eastern.Stories (10/05/94)

#include <mudlib.h>
#include <explore.h>
#include <uid.h>

inherit SAVE;

mapping explores = ([]);
mapping total_points = ([]);
mapping explore_limit = ([]);

void create()
{
	int i;

	seteuid( getuid() );
	set_persistent(1);
	save::create();
	for( i=0; i<21; i++ )
		if( undefinedp(explore_limit[i]) )
			explore_limit[i] = 0;
}

// This function is to log an explre point as an legal one. Should be
// called by Root or Admin.
int log_explore(string area, int code)
{
	string uid;

	uid = geteuid( previous_object() );
	if( uid != ROOT_UID && !member_group(uid, "admin") ) return 0;
	if( member_array(area, AREAS) == -1 ) return 0;
	if( code > MAX_EXPLORE ) return 0;

	if( undefinedp(explores[area]) ) explores[area]="";
	if( !test_bit(explores[area],code) ) total_points[area]++;
	explores[area] = set_bit( explores[area], code );
	save_data();
	return 1;
}

// This function is to delete an legal explre point. Should be
// called by Root or Admin.
int clear_explore(string area, int code)
{
	string uid;

	uid = geteuid( previous_object() );
	if( uid != ROOT_UID && !member_group(uid, "admin") ) return 0;
	if( member_array(area, AREAS) == -1 ) return 0;
	if( code > MAX_EXPLORE ) return 0;

	if( undefinedp(explores[area]) ) return 0;
	if( test_bit(explores[area],code) ) total_points[area]--;
	explores[area] = clear_bit( explores[area], code );
	save_data();
	return 1;
}

// This function is called by user->set_explore() to confirm an
// explore point's legality.
int valid_explore(string explore)
{
	string area;
	int code;

	if( sscanf(explore, "%s#%d", area, code) != 2 ) return 0;
	if( undefinedp(explores[area]) ) return 0;
	return test_bit(explores[area], code);
}

varargs int query_total_explore(string area)
{
	string *areas;
	int i,j, points;

	if( area ) {
		if( undefinedp(explores[area]) ) return 0;
		if( total_points[area] > 0 ) return total_points[area];
		total_points[area] = 0;
		for( i=0; i<strlen(explores[area])*6; i++ )
			total_points[area] += test_bit(explores[area], i);
		return total_points[area];
	}

	areas = keys(explores);
	points = 0;
	for( i=0; i<sizeof(areas); i++ ) {
		if( total_points[areas[i]] > 0 ) {
			points += total_points[areas[i]];
			continue;
		}
		total_points[areas[i]] = 0;
		for( j=0; j<strlen(explores[areas[i]])*6; j++ )
			total_points[areas[i]] += test_bit(explores[areas[i]], j);
		points += total_points[areas[i]];
	}
	return points;
}

int check_explore(object user)
{
	int lvl, explore,i,exp,mark,exp_mark;
	
	if( !user || !objectp(user) ) return 0;
//	if( !CHECK_EXPLORE ) return 1;
	lvl = (int)user->query_level();
	if( lvl < 0 || lvl > 19 ) return 1;
        if( lvl < 5 ) return 1;
	mark = 0;
	exp_mark = 0;
	for ( i = 0 ; i < sizeof(AREAS) ; i++ ) {
		exp = (int)user->query_explore_points(AREAS[i])*100/query_total_explore(AREAS[i]);
		exp_mark+=exp;
		if ( exp > (lvl-4)*3 ) {
			mark++;
			continue ;
		}
		else {
			tell_object(user,"你在"+to_chinese(AREAS[i])+"的历练还不够　去走走吧 !!\n"); 
			return 0;
		}
	}
	
//	explore = (int)user->query_explore_points();
//	if( explore < explore_limit[lvl+1] ) return 0;
	if ( mark < sizeof(AREAS) ) {
		tell_object(user,
			"你可以在公会使用 explore 指令知道你目前探险度的状况　\n");
		if ( exp_mark >= (lvl-4)*3*sizeof(AREAS) ) {
			tell_object(user,
				"嗯 ! 你的探险度总合够资格升级了　可是其他区域也记得要去走走喔　\n");
			return 1;
		}
		return 0;
	}
	else
		return 1;
}

int set_explore_limit(int lvl, int number)
{
	string uid;
	
	uid = geteuid( previous_object() );
	if( uid != ROOT_UID && !member_group(uid, "admin") ) return 0;
	if( lvl < 1 || lvl > 20 ) return 0;
	explore_limit[lvl] = number;
	save_data();
	return 1;
}

int query_explore_limit(int lvl)
{
	if( lvl < 1 || lvl > 20 ) return 0;
	return explore_limit[lvl];
}

string query_explore_number(string area)
{
	int i;
	string msg;

	if( undefinedp(explores[area]) ) return "none.";
	msg = "";
	for( i=0; i<strlen(explores[area])*6; i++ )
		 msg += test_bit(explores[area],i)+", ";
	return msg;
}
