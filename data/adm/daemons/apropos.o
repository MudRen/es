#adm/daemons/aproposd.c
apropos_phrases (["unequip - unequips (removes) armor from player":"lfuns","shout() - sends a message to all living objects":"efuns","asin() - return the arcsine of a float":"efuns","shout() - sends a message to all interactive users.":"efuns","deep_inventory() - return the nested inventory of an object":"efuns","set_living_name() - set a living name for a living object":"efuns","remove_env() - remove an environment variable from a living object.":"lfuns","id - function called by present() in order to identify an object":"applies","query_hb_status() - indicate whether a monster's heartbeat is on":"lfuns","data_dir - \"returns a partial pathname for an object to be saved in DATA_DIR":"simul_efuns","query_snooping() - return the object than an object is snooping":"efuns","article - \"simul_efun to return 'a' or 'an', according to passed string":"simul_efuns","query_heart_beat() - query the status of an object's heartbeat":"efuns","dump_socket_status() - display the status of each LPC socket":"efuns","write_prompt - called when the parser wants a prompt to be written.":"applies","force_me() - force a living object to execute a command.":"lfuns","clonep() - determine whether or not a given variable points to a cloned object":"efuns","floatp() - determine whether or not a given variable is a float":"efuns","first_inventory() - return the first item in an object's inventory":"efuns","socket_write() - send a message from a socket":"efuns","throw() - forces an error to occur in an object.":"efuns","uptime() - return the number of seconds elapsed since the last driver reboot":"efuns","enable_wizard() - give wizard priveleges to an object":"efuns","clear_screen - \"returns escape sequence to clear VT100 screen":"simul_efuns","clear_bit() - zero a bit in a bit string":"efuns","create_ghost() - create a ghost object and swap the user into it.":"lfuns","__INIT - function added to objects to handle initialization of variables.":"applies","substr - \"does search & replace in a string":"simul_efuns","rmdir() - remove a directory":"efuns","equip_armor() - cause a monster to equip a piece of armor.":"lfuns","delete_temp - delete a temporary property in an object.":"lfuns","receive_message - provides the interface used by the message efun.":"applies","master() - returns the master object":"efuns","set - sets the value of a property in an object":"lfuns","userp() - determine if a given object was once interactive":"efuns","compile_object - serves as the mudlib interface for the virtual object facility":"applies","visible() - determines if an object can be detected [by another object]":"simul_efuns","all_inventory() - return the inventory of an object":"efuns","receive_snoop - catch incoming snoop text":"applies","crash - function in master that is called in the event the driver crashes":"applies","find_call_out() - find a call out scheduled to be called next":"efuns","query_snoop() - return the snooper of an interactive object":"efuns","query_skills() - return a copy of a living object's skill mapping.":"lfuns","acos() - return the arccosine of a float":"efuns","erase_line - \"returns escape sequence to erase VT100 line":"simul_efuns","set_hide() - set the hide flag on a hidable object":"efuns","call_out_info() - get pending call_out() information":"efuns","link_data() - query the information in a body's connection object.":"lfuns","socket_bind() - bind a name to a socket":"efuns","query_ip_number() - return the ip number for a player object":"efuns","tsh() - force the user to execute a script of commands":"lfuns","say - \"displays message to others in the same room":"simul_efuns","resolve() - resolve an internet address to domain name, or vice versa":"efuns","set_bit() - set a bit in a bitstring":"efuns","remove - remove an object from the game.":"lfuns","this_object() - return the object pointer of the calling object":"efuns","total_wealth() - return the wealth of the object in lowestvalue coins":"lfuns","int notify_fail(string str);":"efuns","valid_link - serves as the mudlib interface for the virtual object facility":"applies","valid_object - allows control over which objects can be loaded":"applies","up_line - \"returns escape sequence to move cursor up a line":"simul_efuns","interactive() - detects whether or not a given object is an interactive":"efuns","move() - move an item from one environment to another.":"lfuns","more() - display a file to the user, one screen at a time.":"lfuns","allocate() - allocate an array":"efuns","emote - \"an efun to implement the emote command":"simul_efuns","dump_file_descriptors() - dump the MudOS process file descriptor table":"efuns","regexp() - regular expression handler":"efuns","intp() - determine whether or not a given variable is an integer":"efuns","block_attack() - prevent a player from attacking or spellcasting":"lfuns","add_xverb() - add a verb that doesn't require a trailing separate space":"efuns","localtime() - convert to local time":"efuns","hiddenp() - determines if a given object is hidden":"simul_efuns","link() - link a file to another":"efuns","add_worth() - credit an object with additional \"worth\"":"efuns","message() - deliver messages to \"living\" objects":"efuns","create - object initialization":"applies","domain_stats() - returns statistics gathered on domains author_stats() - returns statistics gathered on authors":"efuns","dumpallobj() - report various statistics on all objects that have been loaded":"efuns","socket_release() - release ownership of a socket to another object":"efuns","init_commands() - add the command hook add action and set the path.":"lfuns","file_exists - \"determines if a file exists":"simul_efuns","errorp() - determine whether or not a given variable is an error code":"efuns","query_attackers() - return the list of the object's attackers.":"lfuns","say() - send a message to all users in the same environment":"efuns","switch_body() - change the connection from one body to the next":"lfuns","query_load_average() - forces an error to occur in an object.":"efuns","valid_seteuid - secures the use of seteuid(3)":"applies","exp() - find e to the power of a float":"efuns","query_idle() - determine how many seconds an interactive player has been idle":"efuns","process_string() - returns a value by function call":"efuns","temp_file - \"creates pathname for a temporary file":"simul_efuns","compute_autoload_array() - compute a list of objects to save for later":"lfuns","inverse - \"sends VT100 \"inverse\" escape sequence":"simul_efuns","possessive - \"provides an appropriate possessive pronoun":"simul_efuns","query_user() - return 1 if this object is a user body.":"lfuns","in_input() - determines if a player is inputting to an input_to":"efuns","receive() - displays a message to the current object":"efuns","socket_acquire() - assume ownership of a socket":"efuns","destruct - \"overrides the destruct efun":"simul_efuns","move_object() - move an object to another environment":"efuns","connect() - receive a connection and swap it into the user's body":"lfuns","privs_file - specifies the privs string to give to a newly created object":"applies","inverse - \"sends VT100 \"blink\" escape sequence":"simul_efuns","traceprefix() - sets the prefix determining which objects to trace":"efuns","file_name() - get the file name of an object":"efuns","map_array() - modify an array of elements via application of a function":"efuns","user_path - \"constructs a pathname for a user's personal directory":"simul_efuns","malloc_status() - report various statistics related to memory usage.":"efuns","set_privs() - set the privs string for an object":"efuns","creator_file - \"extracts creator name from a complete pathname":"simul_efuns","subjective - \"provides an appropriate subject pronoun":"simul_efuns","geteuid() - return the effective user id of an object":"efuns","index - \"returns position of target in array":"simul_efuns","unique_array() - partitions an array of objects into groups":"efuns","improve_skill() - credit the user with skill use points.":"lfuns","query_skill_stats() - return the level of the stat associated with each skill.":"lfuns","valid_override - controls the use of efun::":"applies","origin() - determine how the current function was called":"efuns","member_array() - returns index first occurence of a given item in an array":"efuns","move_player() - move a player into a given room":"lfuns","clean_up - periodically called in inactive objects":"applies","merge - \"merges two arrays or mappings into a single mapping":"simul_efuns","socket_close() - close a socket":"efuns","replace_string() - replace all instances of a string within a string":"efuns","shutdown - \"overrides the driver's shutdown efun":"simul_efuns","log_file() - append a message to a log file":"efuns","query_idle_string - \"returns string describing how long player has been idle":"simul_efuns","values() - return an array of the values from the (key, value) pairs in a mapping":"efuns","map_delete() - remove a (key, value) pair from a mapping based on the key":"efuns","write() - send a message to current player":"efuns","strsrch() - search for substrings in a string":"efuns","sizeof() - return the number of elements in an array or mapping":"efuns","data_file - \"returns a path name for an object":"simul_efuns","tan() - return the tangent of a float":"efuns","init_skills() - initialize a living object's skills.":"lfuns","tell_room - \"sends a message to all objects in a room":"simul_efuns","debugmalloc() - dumps information on malloc'd memory to a file.":"efuns","do_alias() - apply global and user-defined aliases to the input string.":"lfuns","set_author - set the author associated with an object.":"efuns","shadow() - shadow one or more functions in some object":"efuns","coinvalue() - return the value, in base units, of a given coin type":"lfuns","die() - produce death in a living body object.":"lfuns","change_skill_level() - directly set the level of a living object's skill.":"lfuns","delete - used to delete a property in an object.":"lfuns","set_reset - modify the time until reset on an object":"efuns","rm() - remove a file":"efuns","unwield_weapon() - Cause a monster to stop wielding a weapon.":"lfuns","parse_command() - parse commands given in a string":"efuns","continue_attack() - begin a new round of combat.":"lfuns","debug_info() - display debug information":"efuns","shutdown() - shutdown the driver":"efuns","users() - return an array of objects containing all interactive players":"efuns","reset - allows an object to do self-maintenance":"applies","mud_status() - report various driver and mudlib statistics":"efuns","to_int - convert a float to an int":"efuns","sin() - return the sine of a float":"efuns","valid_hide - allows or disallows objects to hide and see hidden objects":"applies","ppossessive - \"provides an appropriate possessive pronoun":"simul_efuns","pointerp() - determine whether or not a given variable is an array":"efuns","destruct() - remove an object from the games":"efuns","log() - returns the natural logarithm of a float":"efuns","query_prevent_shadow() - prevent assigning a shadow to the given object.":"lfuns","query_history() - return a user's queue of recent commands":"lfuns","enable_commands() - allow object to use 'player' commands":"efuns","query_monster() - return 1 if this object is a monster body.":"lfuns","ed() - edit a file":"efuns","valid_shadow - controls which objects can be shadowed":"applies","to_object - \"converts a string to the corresponding object":"simul_efuns","path_file - \"extracts file and path from a full pathname":"simul_efuns","sscanf() - match substrings in a string.":"efuns","set_status - sets the status (open, closed, locked) of a door in a room inheriting /std/doors.c":"lfuns","get_object() - does its best to get its object - dead or alive.":"simul_efuns","wrap - \"implements simple word wrap":"simul_efuns","pow() - find an exponent of a float":"efuns","tell_room() - send a message to a room":"efuns","set_name() - set names of an object.":"lfuns","catch_tell - provides an interface to interaction with users":"applies","cos() - return the cosine of a float":"efuns","clear_line - \"returns escape sequence to clear VT100 line":"simul_efuns","set_link() - set a pointer to a body's connection object.":"lfuns","modify_skill() - temporarily alter the level of a living object's skill.":"lfuns","handle_history() - check a string against the history queue, and add it":"lfuns","find_object() - find an object by file name":"efuns","author_file - determine the author for a given object":"applies","exclude_array - \"deletes a range from a copy of an array":"simul_efuns","user_exists - \"determines whether a user exists":"simul_efuns","allocate_mapping() - pre-allocate space for a mapping":"efuns","function_exists() - find the file containing a given function in an object":"efuns","query_link() - return a pointer to the connection of the current body.":"lfuns","rusage() - reports information gathered by the getrusage() system call":"efuns","query_host_name() - return the host name":"efuns","rusage() - reports information gathered by the UNIX(tm) getrusage() system call":"efuns","set_debug_level() - sets the debug level used by the driver's debug() macro":"efuns","write_bytes() - writes a contiguous series of bytes to a file":"efuns","slice_array - \"implements old-style slice_array":"simul_efuns","sort_array() - sort an array":"efuns","disable_wizard() - remove wizard priveleges from an object":"efuns","mkdir() - make a directory":"efuns","next_inventory() - return the next object in the same inventory":"efuns","filter_array() - return a selective sub-array":"efuns","cmd_hook() - find the appropriate command to handle a user's input.":"lfuns","this_player() - return the object representing the player causing the call to this object":"efuns","find_player() - find a player by name":"efuns","children() - returns an array of objects cloned from a given object.":"efuns","livings() - return an array of all living objects":"efuns","exec() - switches a player (interactive) connection from one object to another":"efuns","edit() - allow a user to begin editing a file.":"lfuns","receive_damage() - do damage to a living object.":"lfuns","atoi - \"converts a string to an integer":"simul_efuns","add_action() - bind a command verb to a local function":"efuns","epilog - returns an array of the filenames of the objects to be preloaded.":"applies","dump_variable - \"returns a text representation of its argument, regardless of type":"simul_efuns","cease_all_attacks() - clear the player's attacker list.":"lfuns","clone_object() - load a copy of an object":"efuns","objects - return an array of all loaded objects":"efuns","add - adds a property to an object's data":"lfuns","move_object() - move current object to another environment":"efuns","writef - \"formats strings & optionally writes them":"simul_efuns","error - generate a run-time error":"efuns","uniq_array - \"eliminates duplicate entries from an array":"simul_efuns","valid_socket - protects the socket efunctions.":"applies","in_edit() - determine if a player is in the editor":"efuns","add_worth () - credit an object with additional \"worth\"":"efuns","lock_func - determines whether a particular key can open this object":"lfuns","move_around() - cause a moving monster to move.":"lfuns","socket_address() - return the remote address for an efun socket":"efuns","update_link - updates the status of a door linked to one in this room, and sends an appropriate message to the linked room":"lfuns","exec - \"overrides the driver's efun":"simul_efuns","printf, sprintf - formatted output conversion":"efuns","net_dead - called by the MudOS driver when an interactive object drops its connection":"applies","catch() - catch an evaluation error":"efuns","get_char - \"temporary patch to allow use of get_char on platforms where it hasn't yet been implemented.":"simul_efuns","atan() - return the tangent of a float":"efuns","getoid - \"returns the number at the end of a numbered file name":"simul_efuns","process_input - provide a hook for the MudOS driver to send a copy of what the player is typing to the player object.":"applies","rename() - rename a file":"efuns","find_living() - find a living object matching a given id":"efuns","query_auto_load - \"used in player-held objects that need to reload automatically at each login":"lfuns","stat() - returns information pertaining to a file or a directory":"efuns","inherit_list() - get a list of parents of an object":"efuns","pluralize - \"converts singular form of noun to plural":"simul_efuns","cp() - copy a file":"efuns","strcmp() - determines the lexical relationship between two strings.":"efuns","query_verb() - return the name of the command currently being executed":"efuns","shadowp() - determine whether or not a given object it shadowing another":"efuns","tail() - displays the latter portion of a file":"efuns","create_door - sets up a door in a room inheriting /std/doors.c":"lfuns","base_name - \"gets the base name of an object":"simul_efuns","read_bytes() - reads a contiguous series of bytes from a file into a string":"efuns","release_object() - determine whether an object will let its contents go.":"lfuns","disable_commands() - makes a living object non-living":"efuns","set_heart_beat() - enable or disable an object's heartbeat":"efuns","pluralize_verb - \"converts singular form of noun to plural":"simul_efuns","crypt() - encrypt a string":"efuns","present() - find an object by id":"efuns","init - function in an object called by move_object() to initialize verb/actions":"applies","heal_up() - restore an object's good health.":"lfuns","id() - checks to see if a string is a legal id for the object":"lfuns","void notify_fail(string str);":"efuns","undefinedp() - determine whether or not a given variable is undefined.":"efuns","load_autoload_obj - load a user's autoloading objects.":"lfuns","restore_object() - restore values of variables from a file into an object":"efuns","write_file() - appends a string to a file":"efuns","set_skill() - create a new skill in a living object.":"lfuns","previous_object() - returns the object that called the current function":"efuns","preload - preload an object into memory.":"applies","set_material() - set material of an object.":"lfuns","socket_create() - create an efun socket":"efuns","objective - \"provides an appropriate object pronoun":"simul_efuns","call_out() - delayed function call in same object":"efuns","do_nicknames() - replace any nicknames in a user's command.":"lfuns","query_privs() - return the privs string for an object":"efuns","nullp() - determine whether or not a given variable is null.":"efuns","time_expression() - return the amount of real time that an expression took":"efuns","extract() - extract a substring from a string":"efuns","member_group - \"tests whether a player is a member of a given group":"simul_efuns","ceil() - round a float up to the nearest integer":"efuns","capitalize() - capitalize a string":"efuns","socket_connect() - initiate a connection on a socket":"efuns","break_point() - checks the program stack to make sure it's valid":"efuns","set_malloc_mask() - sets the mask controlling display of malloc debug info":"efuns","stringp() - determine whether or not a given variable is a string":"efuns","valid_save_binary - controls whether or not an object can save its program":"applies","directory_exists - \"determines if a directory exists":"simul_efuns","resolv_path - \"calculates path name needed for cd command":"simul_efuns","tell_object - \"send message to an object":"simul_efuns","to_float - convert an int to a float":"efuns","spell_cast() - initialize a monster as a spellcaster":"lfuns","seteuid() - set the effective user id (euid) of an object":"efuns","valid_write - checks if a certain person has write permission on a file":"applies","objectp() - determine whether or not a given variable is an object":"efuns","set_long() - set long description of an object.":"lfuns","remove_action - unbind a command verb from a local function":"efuns","log_error - log errors intelligently":"applies","input_to() - causes next line of input to be sent to a specified function":"efuns","query_current_attacker() - return the object at the top of the attack list.":"lfuns","write - \"displays message to this_player()":"simul_efuns","quit() - prepare to destroy a body object.":"lfuns","socket_listen() - listen for connections on a socket":"efuns","mkdirs - \"creates multiple subdirectories":"simul_efuns","opcprof() - reports statistics on calling frequencies of various efuns":"efuns","refs - return the number of references to a data structure":"efuns","functionp() - determine whether or not a given variable is a function pointer.":"efuns","receive_healing() - heal a living object.":"lfuns","set_short() - set short description of an object.":"lfuns","deep_inherit_list() - get a list of ancestors of an object":"efuns","time() - return the number of seconds since January 1, 1970":"efuns","save_data() - save a user's body data to file.":"lfuns","remove_call_out() - remove a pending call_out":"efuns","memory_info - obtain info on object/overall memory usage":"efuns","random() - return a pseudo-random number":"efuns","strlen() - returns the length of a string":"efuns","add_temp - add to a temporary property.":"lfuns","function_profile() - get function profiling information for an object":"efuns","initialize_link - sets the status of a door to match that of the linked door":"lfuns","cat() - output part or all of a file":"efuns","ctime() - return a time string":"efuns","socket_error() - return a text description of a socket error":"efuns","call_other() - call a function in another object":"efuns","query_name - called by the MudOS driver to find out an interactive object's name":"applies","lower_case() - return the lowercase version of a given string":"efuns","query_temp - query a temporary property in an object.":"lfuns","creator_file - specifies the uid to give to a newly created object":"applies","domain_file - determine the domain for a given object":"applies","file_size() - get the size of a file":"efuns","pick_lock - attempts to pick a lock":"lfuns","query - returns the value of a property in an object":"lfuns","clean_up_attackers() - remove dead or absent monsters from the attack list":"lfuns","execute_attack() - make a single meelee attack against a target.":"lfuns","set_env() - set a value in the users environment variables.":"lfuns","unequip_armor() - Cause a monster to stop equipping armor.":"lfuns","keys() - return an array of the keys from the (key, value) pairs in a mapping":"efuns","next_living() - returns the next living object in the living object hash list":"efuns","bold - \"sends VT100 \"bold\" escape sequence":"simul_efuns","underscore - \"sends VT100 \"underscore\" escape sequence":"simul_efuns","init_setup() - initialize a body prior to use.":"lfuns","connect - returns a pointer to the user (player) object to the driver":"applies","environment() - return the environment of an object":"efuns","add_verb() - bind a verb to a local function":"efuns","tell_object() - send a message to an object":"efuns","receive_object - lets object decide whether or not to receive others.":"lfuns","restore_body() - load a body's saved data.":"lfuns","getuid() - return the user id (uid) of an object":"efuns","valid_read - checks if a certain person has read permission on a file":"applies","explode() - break up a string":"efuns","snoop - \"overrides the driver's snoop efun":"simul_efuns","export_uid() - set the uid of another object":"efuns","sqrt() - returns the square root of a float":"efuns","coins_carried() - return the number of coins in the object's wealth.":"lfuns","reclaim_objects - reclaim any lingering objets":"efuns","basic_commands() - do any add_actions for commands coded in the body":"lfuns","shout - \"displays message to others in the mud":"simul_efuns","check_light - Determine if an object is a light source.":"lfuns","moncontrol() - turns on/off profiling during execution":"efuns","command() - execute a command as if given by the object":"efuns","wield_weapon() - cause a monster to wield a weapon.":"lfuns","valid_link - controls the use of link(3)":"applies","inherits() - determine if an object inherits a given file":"efuns","wizardp() - determines if a given object had enable_wizard() performed in it":"efuns","format_time - \"Converts an int to a string representation of the time.":"simul_efuns","dump_prog() - dump/disassemble an LPC object":"efuns","socket_accept() - accept a connection on a socket":"efuns","commands() - returns some information about actions the user can take":"efuns","living() - detects whether or not a given object is \"living\"":"efuns","unwield() - unwields (removes) weapon from a player's hands":"lfuns","read_file() - read a file into a string":"efuns","match_patch() - search a mapping for a path":"efuns","get_objects() - like get_object() but with added bells and whistles":"simul_efuns","floor() - round a float down to the nearest integer":"efuns","trace() - sets trace flags and returns the old ones.":"efuns","identify() - convert a mixed variable to an identifying string":"simul_efuns","get_char - causes next character of input to be sent to a specified function":"efuns","tell_group - \"sends a message to a list of players":"simul_efuns","destroy_autoload_obj() - destroy the user's autoloading objects":"lfuns","query_ghost() - return 1 if this object is a ghost body.":"lfuns","set_temp - set a temporary property in an object.":"lfuns","query_skill_points() - return the number of use points of an object's skills.":"lfuns","kill_ob() - cause an object to enter combat with an opponent.":"lfuns","reload_object - return an object to its just-loaded state":"efuns","query_ip_name() - return the ip name of a given player object.":"efuns","format_string - \"minimal string formatting for those without sprintf":"simul_efuns","save_object() - save the values of variables in an object into a file":"efuns","relay_message() - handle a received message in a monster":"lfuns","each() - iterate over the (key, value) pairs in a mapping":"efuns","mapp() - determine whether or not a given variable is a mapping":"efuns","snoop() - snoop an interactive user":"efuns","cache_stats() - report various driver and mudlib statistics":"efuns","virtualp() - determine whether a given variable points to a virtual object":"efuns","implode() - concatenate strings":"efuns","get_dir() - returns information pertaining to a filesystem directory":"efuns","find_object_or_load - \"find an object, loading it into memory if necessary":"simul_efuns","query_env - get the value of a living object's environment variables.":"lfuns",])
