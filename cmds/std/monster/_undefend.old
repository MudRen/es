// _protect.c
// The protection command. One player may protect another. If A protects B,
// then all attacks directed against player B hit player A instead.
// Protection loops are not allowed; that is, if A protects B and B
// protects C, then attacks against A hit B regardless of C's best
// intentions.
// This makes it possible for fighters to protect spellcasters while
// spells are cast, for high-skill players to protect low-skill ones,
// whatever you like.
// Mobydick, 6-13-93

#include <mudlib.h>

inherit DAEMON ;

int help() ;

int cmd_undefend(string str)
{
	object dest;
	object *foo;
	int i;

	if(!str) return help();
	foo = this_player()->query_temp("protectees");
	if( !foo || !pointerp(foo) ) return notify_fail( "你现在并没有保护任何人。\n");
	for(i=0; i<sizeof(foo); i++ )
		if( !foo[i]->id(str) ) continue;
		else break;
	if( i>=sizeof(foo) ) return notify_fail( "你现在并没有保护任何叫做 " + str + " 的人。\n");
	write( "你停止保护" + foo[i]->query("c_name") + "。\n");
	tell_object( foo[i],
		this_player()->query("c_name") + "停止保护你。\n");
	dest = foo[i];
	foo -= ({ dest });
	this_player()->set_temp("protectees", foo);
	foo = dest->query_temp("protectors");
	foo -= ({ this_player() });
	dest->set_temp("protectors", foo);
	return 1 ;
}

int help() {
	write ("Usage: undefend <player>\n\n"+
"If you are protecting <player> against attacks, then the undefend\n"+
"command will allow you to stop protecting them.\n"+
"\nSee also: defend.\n") ;
	return 1 ;
}
